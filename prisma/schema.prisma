// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

view doctor_info {
  user_id      String
  doctor_id    String   @id @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  first_name   String
  last_name    String
  username     String
  email        String
  phone_number String
  dob          String
  user_type    UserType
  // user_social  user_social[]
}

enum UserType {
  user
  doctor
}

model User {
  id           String      @id @unique @default(uuid())
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  first_name   String
  last_name    String
  username     String
  email        String      @unique
  password     String
  phone_number String?
  user_type    UserType    @default(user)
  // user_socials user_social[]
  user_roles   user_role[]
  doctor_profile Doctor?  
  dob            String?

  @@map(name: "users")
}

// model Social {
//   id              String            @id @unique @default(uuid())
//   name            String
//   description     String?
//   user_socials    user_social[]
//   hospital_social hospital_social[]

//   @@map(name: "socials")
// }

// model user_social {
//   user                   User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   social                 Social       @relation(fields: [social_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   user_id                String
//   social_id              String
//   doctor_info            doctor_info? @relation(fields: [doctors_infosUser_id, doctors_infosDoctor_id], references: [user_id, doctor_id])
//   doctor_infoUser_id   String?
//   doctors_infosDoctor_id String?

//   @@id([user_id, social_id])
// }

model hospital_social {
  hospital    Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hospital_id String
  // social      Social   @relation(fields: [social_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  social_id   String

  @@id([hospital_id, social_id])
}

model Role {
  id          String      @id @unique @default(uuid())
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  name        String
  description String?
  user_roles  user_role[]

  @@map(name: "roles")
}

model user_role {
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  role_id String

  @@id([user_id, role_id])
}

model Hospital {
  id                   String                @id @unique @default(uuid())
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  name                 String
  type                 String
  phone_number         String?
  email                String                @unique
  fax                  String?
  clinic_hour          String?
  lab_hour             String?
  description          String?
  registration_id      String
  hospital_social      hospital_social[]
  hospital_doctors     hospital_doctor[]
  hospital_treatments  hospital_treatment[]
  hospital_departments hospital_department[]
  hospital_locations   hospital_location[]

  @@map(name: "hospitals")
}

model hospital_doctor {
  hospital    Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hospital_id String
  doctor      Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor_id   String

  @@id([hospital_id, doctor_id])
}

model Doctor {
  id                     String                  @id @unique @default(uuid())
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  user                   User                    @relation(fields: [user_id], references: [id])
  user_id                String                  @unique
  phone_number           String?
  biography              String?
  is_active              Boolean
  work_experience        Json?
  registration_id        String                  @unique
  hospital_doctors       hospital_doctor[]
  doctor_specializations doctor_specialization[]
  doctor_awards          doctor_award[]
  doctor_degrees         doctor_degree[]
  doctor_locations       doctor_location[]

  @@map(name: "doctors")
}

model Blog {
  id              String          @id @unique @default(uuid())
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  title           String
  Description     String?
  blog_categories blog_category[]

  @@map(name: "blogs")
}

model blog_category {
  blog        Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog_id     String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id String

  @@id([blog_id, category_id])
}

model Category {
  id              String          @id @unique @default(uuid())
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  name            String
  description     String?
  blog_categories blog_category[]

  @@map(name: "categories")
}

model Treatment {
  id                  String               @id @unique @default(uuid())
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  type                String
  description         String?
  hospital_treatments hospital_treatment[]

  @@map(name: "treatments")
}

model hospital_treatment {
  treatment    Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  treatment_id String
  hospital     Hospital  @relation(fields: [hospital_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hospital_id  String

  @@id([hospital_id, treatment_id])
}

model Department {
  id                   String                @id @unique @default(uuid())
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  name                 String
  description          String?
  hospital_departments hospital_department[]

  @@map(name: "departments")
}

model hospital_department {
  department    Department @relation(fields: [department_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department_id String
  hospital      Hospital   @relation(fields: [hospital_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hospital_id   String

  @@id([hospital_id, department_id])
}

model Location {
  id                 String              @id @unique @default(uuid())
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  longitude          String
  latitude           String
  street             String?
  address            String?
  country            String?
  division           String?
  district           String?
  thana              String?
  hospital_locations hospital_location[]
  doctor_locations   doctor_location[]

  @@map(name: "locations")
}

model doctor_location {
  visiting_hour String
  visiting_fee  String
  doctor        Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor_id     String
  location      Location @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location_id   String

  @@id([doctor_id, location_id])
}

model hospital_location {
  location    Location @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location_id String
  hospital    Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hospital_id String

  @@id([hospital_id, location_id])
}

model Specialization {
  id                     String                  @id @unique @default(uuid())
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  name                   String
  description            String?
  doctor_specializations doctor_specialization[]

  @@map(name: "specializations")
}

model doctor_specialization {
  specialization    Specialization @relation(fields: [specialization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialization_id String
  doctor            Doctor         @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor_id         String

  @@id([doctor_id, specialization_id])
}

model Award {
  id            String         @id @unique @default(uuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  name          String
  description   String?
  doctor_awards doctor_award[]

  @@map(name: "awards")
}

model doctor_award {
  award     Award  @relation(fields: [award_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  award_id  String
  doctor    Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor_id String

  @@id([doctor_id, award_id])
}

model Degree {
  id             String          @id @unique @default(uuid())
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  name           String
  description    String?
  doctor_degrees doctor_degree[]

  @@map(name: "degrees")
}

model doctor_degree {
  degree    Degree @relation(fields: [degree_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  degree_id String
  doctor    Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor_id String

  @@id([doctor_id, degree_id])
}
